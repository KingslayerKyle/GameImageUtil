// ------------------------------------------------------------------------
// GameImageUtil - Tool to process game images
// Copyright (C) 2020 Philip/Scobalula
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// ------------------------------------------------------------------------
using System;

namespace GameImageUtil
{
    /// <summary>
    /// A class to handle reconstructing Z component of a BC5 XY normal map
    /// </summary>
    public class AutomaticProcessor : IFileProcessor
    {
        /// <summary>
        /// Gets the ID of this Processor
        /// </summary>
        public string ID { get { return "AutomaticProcessor"; } }

        /// <summary>
        /// Gets the Name of this Processor
        /// </summary>
        public string Name { get { return "Automatic"; } }

        /// <summary>
        /// Processes the provided image
        /// </summary>
        /// <param name="file">File to process</param>
        /// <param name="config">Config with settings</param>
        public void Process(string file, FileProcessorConfig config)
        {
            // Loop and do match, if we find a valid processor, roll with it
            foreach(var processor in config.ViewModel.Processors)
            {
                if(processor.CanProcessFile(file, config))
                {
                    processor.Process(file, config);
                    return;
                }
            }

            // If all else fails, direct convert
            var defaultProcessor = config.ViewModel.FindProcessor("DirectConvertProcessor");

            if(defaultProcessor != null)
                defaultProcessor.Process(file, config);
        }

        /// <summary>
        /// Checks if we can process this file, this is used by the Automatic Processor and does not affect manually selected modes
        /// </summary>
        /// <param name="file">File to process</param>
        /// <param name="config">Config with settings</param>
        /// <returns>True if we can, otherwise False</returns>
        public bool CanProcessFile(string file, FileProcessorConfig config)
        {
            return false;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns>A string that represents the current object.</returns>
        public override string ToString()
        {
            return Name;
        }
    }
}